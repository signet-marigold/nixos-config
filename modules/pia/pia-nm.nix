# Taken from https://github.com/NixOS/nixpkgs/issues/347539
# Props to github:bjornfor for making this work

# NixOS Module for Private Internet Access (VPN) support in NetworkManager.

{ config, lib, pkgs, ... }:

with lib;

let
  cfg = config.networking.networkmanager.pia-vpn;

  piaCertificateFile = pkgs.fetchurl {
    url = "https://www.privateinternetaccess.com/openvpn/ca.rsa.4096.crt";
    sha256 = "1av6dilvm696h7pb5xn91ibw0mrziqsnwk51y8a7da9y8g8v3s9j";
  };

  # id: human facing name of the connection (visible in NetworkManager)
  # uuid: any UUID in the form produced by uuid(1) (or perhaps _any_ string?)
  # remote: hostname of PIAs server (e.g. "uk-london.privateinternetaccess.com")
  #
  # See https://www.privateinternetaccess.com/installer/pia-nm.sh for available
  # options.
  template = { id, uuid, remote }:
    ''
      [connection]
      id=${id}
      uuid=${uuid}
      type=vpn
      autoconnect=false

      [vpn]
      service-type=org.freedesktop.NetworkManager.openvpn
      username=@USERNAME@
      comp-lzo=yes
      remote=${remote}
      cipher=AES-256-CBC
      auth=SHA256
      connection-type=password
      password-flags=${if cfg.passwordFile != null then "0" else "1"}
      port=1197
      proto-tcp=no
      ca=${piaCertificateFile}

      [ipv4]
      method=auto
      ${lib.optionalString (cfg.passwordFile != null) ''

      [vpn-secrets]
      password=@PASSWORD@
      ''}
    '';

  toSubdomain = server:
    lib.removeSuffix ".privacy.network" server;

  # File generated by ./pia-server-list-generator.sh
  allServers = import ./pia-generated-server-list.nix;

  filteredServers =
    builtins.filter (x: lib.elem (toSubdomain x.remote) cfg.serverList) allServers;

  allServerSubdomains =
    map (x: toSubdomain x.remote) allServers;

  serverEntryToEtcFilename = serverEntry:
    let n = toSubdomain serverEntry.remote;
    in "NetworkManager/system-connections/pia-vpn-${n}";

  serverEntryToEtcFile = serverEntry:

    { "${serverEntryToEtcFilename serverEntry}" =
        { text = template { inherit (serverEntry) id uuid remote; };
          # NetworkManager refuses to load world readable files
          mode = "0600";
        };
    };

  etcFiles =
    lib.fold
      (x: acc: lib.recursiveUpdate (serverEntryToEtcFile x) acc)
      {}
      filteredServers;

  # "setupSecrets" is a sops-nix activation script. If it exists we must order
  # ourself after it so the secret files are ready before we start.
  maybeSetupSecrets =
    lib.optionals (config.system.activationScripts ? setupSecrets) [ "setupSecrets" ];
in
{
  options.networking.networkmanager.pia-vpn = {

    enable = mkOption {
      type = types.bool;
      default = false;
      description = ''
        Whether to enable Private Internet Access VPN connections in NetworkManager.

        To make NetworkManager update its UI after using this module to
        add/remove connections, you either have to run
        `sudo nmcli connection reload` or reboot.
      '';
    };

    usernameFile = mkOption {
      type = types.nullOr types.path;
      default = null;
      example = "/run/keys/pia-vpn.username";
      description = ''
        Path to a file containing your PIA username. (To not leak username to
        the Nix store.) The username will be copied into the file(s)
        <literal>/etc/NetworkManager/system-connections/pia-vpn-*</literal>.

        The password for this username is either entered interactively when
        starting the connection for the first time (the password is stored in
        the OS keyring) or you can use the passwordFile option.
      '';
    };

    passwordFile = mkOption {
      type = types.nullOr types.path;
      default = null;
      example = "/run/keys/pia-vpn.password";
      description = ''
        Path to a file containing your PIA password (optional). If this
        option is not defined, NetworkManager will prompt for
        the password when enabling the connection. That password will then be
        stored in the OS keyring. If non-null, the password in this file will
        be embedded (in plain text) into the file(s)
        <literal>/etc/NetworkManager/system-connections/pia-vpn-*</literal>.

        This option doesn't leak the password to the Nix store.
      '';
    };

    serverList = mkOption {
      type = types.listOf types.str;
      default = allServerSubdomains;
      description = ''
        List of PIA VPN servers that will be available for use. If you only use
        a few servers you can reduce some UI clutter by listing only those
        servers here.
      '';
    };

  };

  config = mkIf cfg.enable {

    assertions = [
      # Only the username is required; NetworkManager will prompt for the
      # password if it is unset, and store it in the OS keyring.
      { assertion = cfg.usernameFile != null;
        message = "networking.networkmanager.pia-vpn.usernameFile is not set.";
      }
      { assertion = (lib.length cfg.serverList) > 0;
        message = "The option networking.networkmanager.pia-vpn.serverList is empty, no VPN connections can be made.";
      }
      { assertion = all (x: elem x allServerSubdomains) cfg.serverList;
        message =
          let
            badElements = builtins.filter (x: !(lib.elem x allServerSubdomains)) cfg.serverList;
          in
          ''
            The option networking.networkmanager.pia-vpn.serverList contains one or more bad elements: ${builtins.toString badElements}
            Allowed elements: ${builtins.toString allServerSubdomains}
          '';
      }
    ];

    environment.etc = etcFiles;

    system.activationScripts.pia-nm-usernameFile = lib.mkIf (cfg.usernameFile != null) (stringAfter ([ "etc" "specialfs" "var" ] ++ maybeSetupSecrets)
      ''
        if [ -f "${cfg.usernameFile}" ]; then
          echo "loading networking.networkmanager.pia-vpn.usernameFile from ${cfg.usernameFile}"
          ${lib.concatMapStringsSep "\n"
            (f: "'${pkgs.replace-secret}/bin/replace-secret' '@USERNAME@' '${cfg.usernameFile}' '${f}'")
            (map (s: "/etc/${serverEntryToEtcFilename s}") filteredServers)}
        else
            echo "WARNING: networking.networkmanager.pia-vpn.usernameFile (${cfg.usernameFile}) does not exist."
        fi
      '');

    system.activationScripts.pia-nm-passwordFile = lib.mkIf (cfg.passwordFile != null) (stringAfter ([ "etc" "specialfs" "var" ] ++ maybeSetupSecrets)
      ''
        if [ -f "${cfg.passwordFile}" ]; then
          echo "loading networking.networkmanager.pia-vpn.passwordFile from ${cfg.passwordFile}"
          ${lib.concatMapStringsSep "\n"
            (f: "'${pkgs.replace-secret}/bin/replace-secret' '@PASSWORD@' '${cfg.passwordFile}' '${f}'")
            (map (s: "/etc/${serverEntryToEtcFilename s}") filteredServers)}
        else
            echo "WARNING: networking.networkmanager.pia-vpn.passwordFile (${cfg.passwordFile}) does not exist."
        fi
      '');
  };

}
